End goal: Communicate between various peers that have at most 3 direct 
	connections, but utilizing "gossip" to create a network table that 
	then has djikstra's algorithim run on it to find best route from 
	peer A to peer B. The network is based on docker with each peer 
	utilizing a sepearate docker container on one docker network.
	
TODO:
	Build test DONE
	Peer files connect to eachother over docker DONE
	Create data structures for direct peers and nav table DONE
	Implement D's A to find optimal route DONE
	Organize project structure (split into multiple files, directories)
	DONE
	Implement cmake, Makefile DONE
>>	Change dockerfile/whatever to run rand_conn.c before accessing 
	compose.yaml automatically
	Implement "end game" (stop pinging when all peers are connected)
	After end game, program should then produce graphs for each peer as
	well as the computed D's A for a given route
	Implement other data types being passed by the peers

System:
	"General" ping (includes Setup and Communicate)
	- Every time two peer communicate, they share their routing tables
	  with eachother

	"Setup" ping peers:
	- Connect to peer
	- Gossip, sharing routing table
	- Process incoming routing table
	- Run D's A
	- Disconnect

	"Communicate" date transfer with peers:
	- Put destination peer
	- Find route to peer
	- If no route, ping furthest peer to find dest
	- Send data to peer along route (passing from peer to peer)
		- Peers only know where data came from, and next hop peer
	- Recieve ACK
	- Disconnect

Other:
	Maybe have a central sdn controller that performs all the routing
	calculations to avoid having to create and maintain routing 
	protocols.
	Implement match + action logic more accurately
	All peers are middleboxes
	Look into openflow sdn, nfvs

In the end:
	Create system test that automatically takes a random destination 
	for each host, then run system and send file

	Final implement: create local networks (several users within one 
	container) that then communicate with other local networks (find
	a local user on a seperate container from current container)
